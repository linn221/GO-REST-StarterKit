{
	// Place your Go-Htmx-Crud workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"template": {
		"scope": "gotmpl",
		"prefix": "if",
		"body": [
			"{{/* _$1_ */}}",
			"{{ if $0 }}",
			"",
			"",
			"{{ end }}",
			"{{/* _$1_ */}}",
		],
	},
	"templatedd": {
		"scope": "gotmpl",
		"prefix": "iff",
		"body": [
			"{{ if $1 }}",
			"$0",
			"",
			"{{ end }}",
		],
	},
	"template2": {
		"scope": "gotmpl",
		"prefix": "range",
		"body": [
			"{{/* _$1_ */}}",
			"{{ range $0 }}",
			"",
			"",
			"{{ end }}",
			"{{/* _$1_ */}}",
		],
	},
	"template222": {
		"scope": "gotmpl",
		"prefix": "rangee",
		"body": [
			"{{ range $1 }}",
			"$0",
			"{{ end }}",
		],
	},
	"template9": {
		"scope": "gotmpl",
		"prefix": "with",
		"body": [
			"{{/* _$1_ */}}",
			"{{ with $0 }}",
			"",
			"",
			"{{ end }}",
			"{{/* _$1_ */}}",
		],
	},
	"template99": {
		"scope": "gotmpl",
		"prefix": "withh",
		"body": [
			"{{ with $1 }}",
			"$0",
			"{{ end }}",
		],
	},
	"template4": {
		"scope": "gotmpl",
		"prefix": "end",
		"body": [
			"{{ end }}",
		],
	},
	"template92": {
		"scope": "gotmpl",
		"prefix": "start",
		"body": [
			"{{ $1 }}",
			"$0",
			"",
			"{{ end }}",
		],
	},
	"template92c": {
		"scope": "gotmpl",
		"prefix": "cmt",
		"body": [
			"{{/* $0 */}}",
		],
	},
	"template92cssjj": {
		"scope": "gotmpl",
		"prefix": "require",
		"body": [
			"{{/* @[$0] */}}",
		],
	},
	"Inline error Handle": {
		"prefix": "eh",
		"body": [
			"if err := $0; err != nil {",
			"\treturn nil, err",
			"}",
		],
		"description": "Log output to console"
	},
	"pnaic": {
		"prefix": "pnc",
		"body": [
			"panic(\"2d\")",
		],
	},
	"Inline error Handle validate#2": {
		"prefix": "ev",
		"body": [
			"if err := $0; err != nil {",
			"\treturn err",
			"}",
		],
		"description": "Log output to console"
	},
	"Error Handle": {
		"prefix": "rnil",
		"body": [
			"if err != nil {",
			"\treturn nil, err",
			"}",
		],
	},
	"New Snippet": {
		"prefix": "snip",
		"body": [
	"\t\"new snippettt\": {",
	"\t\t\"prefix\": \"$1\",",
	"\t\t\"body\": [",
	"$0",
	"\t\t],",
	"\t},",
		],
	},
	"My handler": {
		"prefix": "myhandle",
		"body": [
			"func $0(w http.ResponseWriter, r *http.Request, renderer *views.Renderer, container *MyRequest) error {",
			"\tpanic(\"not implemented\") //2d",
			"}",
		],
		"description": "Log output to console"
	},
		"new snippsettt": {
			"prefix": "ison",
			"body": [
		"`json:\"$1\" validate:\"$0\"`"
			],
		},
			"new snippettt": {
				"prefix": "hwithinput",
				"body": [
		
	"func $1(w http.ResponseWriter, r *http.Request, input *$2, userId int, shopId string, db *gorm.DB, cache services.CacheService) error {",
	"$0",
	"}"

				],
			},
}